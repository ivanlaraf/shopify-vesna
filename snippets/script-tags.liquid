<script>
  window.addEventListener("load", function() {
    window.__sfWindowLoaded = true
  })

  // Fixed: Largest Contentful Paint image was lazily loaded
  const first_image = document.querySelector('#MainContent .shopify-section img');
  if (first_image) first_image.removeAttribute('loading');

  // Fixed: Largest Contentful Paint image
  let checkConfig = setInterval(() => {
    const config = ElegantTheme.config
    if (config) {
      clearInterval(checkConfig)
      {% if template.name == 'product' %}
        const mediaDesktop = document.querySelector('.m-product-media--desktop')
        const first_image_media = mediaDesktop && mediaDesktop.querySelector('img');
        if (config.mqlMobile) {
          if (first_image_media) first_image_media.setAttribute('loading', 'lazy')
        } else {
          if (first_image_media) first_image_media.removeAttribute('loading')
        }
      {% endif %}
    }
  }, 100)

    // Lazyload background image
    function addIntersectionObserver(classSelector, newClass = '') {
      let lazyImages = [].slice.call(document.getElementsByClassName(classSelector));
      if ("IntersectionObserver" in window) {
        let lazyImageObserver = new IntersectionObserver(function(entries, observer) {
          entries.forEach(function(entry) {
            if (entry.isIntersecting) {
              let lazyImage = entry.target;
              lazyImage.classList.remove(classSelector);
              newClass && lazyImage.classList.remove(newClass);
              lazyImageObserver.unobserve(lazyImage);
            }
          });
        });

        lazyImages.forEach(function(lazyImage) {
          lazyImageObserver.observe(lazyImage);
        });
      }
    }
    function handleBackgroundImageLazyload() {
      return addIntersectionObserver('m-bg-lazy');
    }

    handleBackgroundImageLazyload();
    document.addEventListener('shopify:section:load', () => {
      handleBackgroundImageLazyload();
    })

    // Init scroll top
    function __scrollToTop(element, callback) {
      if (!element) element = document.querySelector('#scroll-to-top-target')
      element.scrollIntoView({ behavior: 'smooth' })
      if (callback) callback();
    }

    function __initScrollTop() {
      const scrollTopButton = document.querySelector('#scroll-to-top-button')
      if (scrollTopButton) {
        scrollTopButton.addEventListener('click', () => __scrollToTop())
        window.addEventListener('scroll', function () {
          const method = window.scrollY > 100 ? 'add' : 'remove'
          scrollTopButton.classList[method]('is-show')
        })
      }
    }

    // Init terms checkbox
    function __initTermsCheckbox() {
      addEventDelegate({
        selector: '.m-terms-conditons [name="agree_terms"]',
        event: 'change',
        handler: (e, target) => {
          let button = target.closest('.m-terms-conditons').nextElementSibling
          while (button) {
            if (button.hasAttribute("data-terms-action")) {
              break;
            }

            button = button.nextElementSibling;
          }
          if (button && button.hasAttributes('data-terms-action')) {
            if (target.checked) {
              button.removeAttribute('disabled')
            } else {
              button.setAttribute('disabled', true)
            }
          }
        }
      })
    }

    window.addEventListener('load', () => {
      __initScrollTop();
      __initTermsCheckbox();
    });
</script>
